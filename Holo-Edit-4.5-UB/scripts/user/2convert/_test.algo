import holoedit.data.*;
import holoedit.functions.*;
import holoedit.gui.*;
import holoedit.util.*;
import holoedit.data.*;
import java.lang.Math;
import java.util.*;
import static algo.GroovyEditorFunctions.*;

mySDIFdata = getSDIFdata(gp, "bubbles0_m.trc.sdif - 1TRC - begin time=0:2:53'990 - Track:0")
timeCount = getTimesCount(mySDIFdata)

int dateBegin = getBeginDate(gp);
double dur = getDuration(gp);

FieldIndex = 0;// champs de la SDIFdata

double durPoint = 0.01 * 100; // 1/100e sec
int nbPoints = (int) (dur / durPoint);

HoloTraj ht = new HoloTraj();
HoloPoint curPt = new HoloPoint();
TreeMap<Double, Double> meanMap = new TreeMap<Double, Double>();

Double value = 0d;
if (!mySDIFdata.sdifTreeMap.isEmpty())
{	
	for (Double key : mySDIFdata.sdifTreeMap.keySet()) {
		double mean =0;
		System.out.println("size="+mySDIFdata.sdifTreeMap.get(key).size());
		for (int s=0; s<mySDIFdata.sdifTreeMap.get(key).size(); s++) {
			mean+=mySDIFdata.sdifTreeMap.get(key).get(s).get(1)*mySDIFdata.sdifTreeMap.get(key).get(s).get(2);
		}
		mean/=mySDIFdata.sdifTreeMap.get(key).size();
		meanMap.put(key, mean);
	}
}

for (int n = 0; n < mySDIFdata.sdifTreeMap.size(); n++) { // DO NOT REMOVE THIS LINE

	curPt = new HoloPoint(); // DO NOT REMOVE THIS LINE

	curTimePoint = getAllTime(mySDIFdata)[n]/10;

	curPt.date = (int) curTimePoint + dateBegin;

	System.out.println("meanMap ="+meanMap);
curPt.x = meanMap.get(getAllTime(mySDIFdata)[n]);
System.out.println("aefakjf");
curPt.y = 1

ht.addElement(curPt);
}

Object[] toReturn = [ht, dur, dateBegin];
return toReturn;
