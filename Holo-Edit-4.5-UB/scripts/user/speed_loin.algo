// imports and declarations
import holoedit.data.*;
import static holoedit.functions.ScriptEditorFunctions.*;
import static java.lang.Math.*;
import static holoedit.util.Ut.*;

HoloPoint inpoint;
HoloTraj trajectory = new HoloTraj();	// creates a new trajectory

// going through the trajectory in the time selection
int trajectorySize = getTrajectorySize();

int beginDate = getBeginDate();	// sets the first date of this trajectory as the begining of the time selection
double duration = getDuration();	// defines this trajectory's duration as the duration of the time selection
int endDate = getEndDate();

int resolution = 5

float datePointer = beginDate;

ArrayList<Double> speed_tab = new ArrayList<Float>();
float s,smin,smax,ssum=0;
float d = getTrajectoryPoint(0).getModule();
smin = d
smax = d

// remplissage tableau
for( int i = 0 ; i < trajectorySize ; i++)
{
	inpoint = getTrajectoryPoint(i); 
	s = inpoint.getModule();
	
	speed_tab.add(s);

	if(s < smin) smin = s;	
	if(s > smax) smax = s;	
}

//********************* VARIABLES 

float po = 2; // power 
float max_speed = 0.95; // [0:1]
boolean invert = false; //

//********************************* 

for( int i = 0 ; i < speed_tab.size() ; i++)
{
	
	s = speed_tab.get(i);
	if(invert)
		s = pow(scale(s,smin,smax,1,1-max_speed),po);
	else
		s = pow(scale(s,smin,smax,1-max_speed,1),po);
	speed_tab.set(i,s);
	
	ssum+=s;
	
}

int date;
int curDate = 0;
float scaler = duration / ssum
for( int i = 0 ; i < trajectorySize ; i++)
{
	inpoint = getTrajectoryPoint(i); 
	
	inpoint.date = curDate;
	curDate += speed_tab.get(i) * scaler ;
	
}

// the trajectory, its duration, and its beginDate must be returned
//Object[] toReturn = [trajectory, duration, beginDate];
//return toReturn;
