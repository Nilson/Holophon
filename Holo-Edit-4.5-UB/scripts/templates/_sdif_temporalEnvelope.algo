// Génération en fonction de l’enveloppe temporelle
// à partir d'un SDIF-1TRC
import holoedit.data.*;import static holoedit.functions.ScriptEditorFunctions.*;// récupération de la donnée SDIF présente dans le scoremySDIFdata = getSDIFdata(gp, "dec11.trc.sdif - st.0 1TRC - begin time=0:2:22'660 - Track:6")int beginDate = getBeginDate(gp);	// date de début de la sélection dans le scoreamplitudeIndex = 2;			// numéro de colonne des matrices TRC contenant les amplitudesdouble duration = getDuration(gp)// un arrayList pour valeurs moyennes à chaque tempsArrayList<Double> meanValues = new ArrayList<Double>();for (Double time : getTimes(mySDIFdata)) {	mean =0;	// moyenne des amplitudes pour chaque temps :	for (int partial=0; partial < howManyDataAtTime(mySDIFdata, time) ; partial++)		mean+= getAllDataAtTime(mySDIFdata, time).get(partial).get(amplitudeIndex);	mean /= howManyDataAtTime(mySDIFdata, time);	meanValues.add(mean);}maximalMeanValue = Collections.max(meanValues);minimalMeanValue = Collections.min(meanValues);// création d'une trajectoire et ajout des pointsHoloTraj trajectory = new HoloTraj();for (int t=0 ; t< getTimesCount(mySDIFdata) ; t++) {time = getTimes(mySDIFdata)[t];	HoloPoint point = new HoloPoint();	point.date = time/10 + beginDate;	// mise à l'echelle entre 0 et 100 de la moyenne et attribution à la coordonnée x	point.x = meanValues.get(t) - minimalMeanValue;	point.x *= 100 / maximalMeanValue	trajectory.addElement(point);}Object[] toReturn = [trajectory, duration , beginDate];return toReturn;